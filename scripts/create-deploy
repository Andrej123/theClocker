#!/bin/bash

root_dir=$(git rev-parse --show-toplevel 2> /dev/null)
if [ -z "${root_dir}" ]; then
	echo "Please move to the theClocker git repository" >&2
	exit
fi

if [ ! -d "${root_dir}/scripts" -o ! -f "${root_dir}/Package.swift" ]; then
	echo "Please move to the theClocker git repository" >&2
	exit
fi

pushd "${root_dir}" &> /dev/null

branch=$(git rev-parse --abbrev-ref HEAD)
commit=$(git rev-parse --short HEAD)
deploy="theClocker-${branch/\//_}-${commit}"
archive="${deploy}.tar.bz2"

echo "Cleaning up before build"

rm -rf .build Packages

echo "Starting build"

mv Package.swift Package.swift.bak
sed 's/vapor\/sqlite-provider\.git/vapor\/mysql-provider\.git/' Package.swift.bak > Package.swift

mv Sources/App/main.swift Sources/App/main.swift.bak
sed 's/VaporSQLite/VaporMySQL/' Sources/App/main.swift.bak > Sources/App/main.swift

swift build -c release

mv Package.swift.bak Package.swift
mv Sources/App/main.swift.bak Sources/App/main.swift

echo "Creating deploy archive ${archive}"

mkdir "${deploy}"

cp .build/release/App "${deploy}/theClocker"
cp .build/release/libCLibreSSL.* "${deploy}"
cp -r {Config,Public,Resources} "${deploy}"

tar --exclude Config/secrets -cjf "${archive}" "${deploy}"
rm -rf "${deploy}"

echo "Cleaning up after build"

rm -rf .build Packages

popd &> /dev/null

mv "${root_dir}/${archive}" . 2> /dev/null
